{"version":3,"sources":["Snake.js","Food.js","App.js","index.js"],"names":["props","_jsx","children","snakeDots","map","dot","i","style","left","concat","top","className","getRandomCoordinates","Math","floor","random","initialState","food","direction","speed","App","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","state","onKeydown","e","window","event","keyCode","setState","moveSnake","dots","_toConsumableArray","head","push","shift","_createClass","key","value","setInterval","this","document","onkeydown","checkIfOutofBorders","checkIfEats","cheackIfCollapsed","onGameover","enlargeSnake","increaseSpeed","_this2","snake","pop","forEach","newSnake","unshift","alert","_jsxs","Snake","Food","Component","ReactDOM","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.2c9105df.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default (props) =>{\r\n    return (\r\n        <div>\r\n            {props.snakeDots.map((dot, i)=> {\r\n\r\n        const style ={\r\n        left: `${dot[0]}%`,\r\n        top: `${dot[1]}%`\r\n\r\n       \r\n}\r\n\r\nreturn (\r\n    <div className=\"snake-dot\" key={i} style={style}></div>\r\n)\r\n                \r\n\r\n                \r\n            })}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport default (props) =>{\r\n\r\n    const style= {\r\n        left: `${props.dot[0]}%`,\r\n        top: `${props.dot[1]}%`\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"snake-food\" style={style}></div>\r\n    )\r\n}","\nimport { Component } from 'react';\nimport './App.css';\nimport Snake from './Snake';\nimport Food from './Food';\n\n\nconst getRandomCoordinates =() =>{\n  let min = 1;\n  let max = 98;\n  let x = Math.floor(Math.random()*(max-min+1)/2)*2;\n  let y = Math.floor(Math.random()*(max-min+1)/2)*2;\n  return[x,y]\n}\n\nconst initialState = {\n    food: getRandomCoordinates(),\n    direction: 'RIGHT',\n    speed: 200,\n    snakeDots: [\n      [0,0],\n      [2,0],\n      [4,0]\n    ]\n  \n}\n\nclass App extends Component {\n\n  state = initialState;\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed)\n    document.onkeydown = this.onKeydown\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutofBorders();\n    this.checkIfEats();\n    this.cheackIfCollapsed();\n  }\n\n  onKeydown = (e)=>{\n    e = e || window.event;\n    switch (e.keyCode){\n      case 38:\n        this.setState({direction: 'UP'})\n        break;\n      case 40:\n      this.setState({direction: 'DOWN'})\n      break;\n      case 37:\n      this.setState({direction: 'LEFT'})\n      break;\n      case 39:\n      this.setState({direction: 'RIGHT'})\n      break;\n    }\n  }\n\n  moveSnake = () =>{\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length-1];\n\n    switch (this.state.direction){\n      case 'RIGHT':\n        head = [head[0] + 2,head[1]];\n        break;\n      case 'LEFT':\n        head = [head[0] - 2,head[1]];\n        break;\n      case 'DOWN':\n      head = [head[0],head[1] + 2];\n      break;\n      case 'UP':\n      head = [head[0],head[1] -2];\n      break;\n    }\n\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots: dots\n    })\n  }\n\n\n \n  checkIfOutofBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length -1];\n    if(head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0){\n      this.onGameover();\n    }\n  }\n\n  checkIfEats (){\n    let head = this.state.snakeDots[this.state.snakeDots.length -1];\n    let food = this.state.food;\n    if (head[0] == food[0] && head[1] == food[1]){\n      this.setState( {\n        food: getRandomCoordinates()\n      }\n      )\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n\n  cheackIfCollapsed (){\n    let snake = [ ...this.state.snakeDots];\n    let head = snake[snake.length-1];\n    snake.pop();\n    snake.forEach(dot =>{\n      if(head[0] == dot[0] && head[1] == dot[1]){\n        this.onGameover();\n      }\n    })\n  }\n\n  enlargeSnake(){\n    let newSnake = [ ...this.state.snakeDots];\n    newSnake.unshift([])\n    this.setState({\n      snakeDots: newSnake\n    })\n  }\n\n  increaseSpeed(){\n    if(this.state.speed > 10){\n      this.setState({\n        speed: this.state.speed - 10\n      })\n    }\n  }\n\n  onGameover(){\n    alert( `Game over, Your Score is ${this.state.snakeDots.length}`);\n    this.setState(initialState);\n  } \n  \n  render(){\n  return (\n    <div className='h1'> <h1> lets play with Mohit</h1>\n    \n    <div className=\"game-area\">\n      <Snake snakeDots={this.state.snakeDots} />\n      <Food dot={this.state.food}/>\n      \n     \n    </div>\n    </div>\n  );\n} \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  \n    <App />\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}